
STM32_Drivers_Layer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea8  080081c4  080081c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800906c  0800906c  00010034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800906c  0800906c  00010034  2**0
                  CONTENTS
  4 .ARM          00000000  0800906c  0800906c  00010034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800906c  0800906c  00010034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800906c  0800906c  0000906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009070  08009070  00009070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08009074  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000034  080090a8  00010034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080090a8  00010078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b73  00000000  00000000  000100a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007ec  00000000  00000000  00011c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00012408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017f  00000000  00000000  00012618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d27  00000000  00000000  00012797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002edb  00000000  00000000  000154be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ae8c  00000000  00000000  00018399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000754  00000000  00000000  00023228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0002397c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081c4 <__do_global_dtors_aux>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4c05      	ldr	r4, [pc, #20]	; (80081dc <__do_global_dtors_aux+0x18>)
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	b933      	cbnz	r3, 80081da <__do_global_dtors_aux+0x16>
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <__do_global_dtors_aux+0x1c>)
 80081ce:	b113      	cbz	r3, 80081d6 <__do_global_dtors_aux+0x12>
 80081d0:	4804      	ldr	r0, [pc, #16]	; (80081e4 <__do_global_dtors_aux+0x20>)
 80081d2:	f3af 8000 	nop.w
 80081d6:	2301      	movs	r3, #1
 80081d8:	7023      	strb	r3, [r4, #0]
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	20000034 	.word	0x20000034
 80081e0:	00000000 	.word	0x00000000
 80081e4:	08009054 	.word	0x08009054

080081e8 <frame_dummy>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <frame_dummy+0x10>)
 80081ec:	b11b      	cbz	r3, 80081f6 <frame_dummy+0xe>
 80081ee:	4903      	ldr	r1, [pc, #12]	; (80081fc <frame_dummy+0x14>)
 80081f0:	4803      	ldr	r0, [pc, #12]	; (8008200 <frame_dummy+0x18>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	bd08      	pop	{r3, pc}
 80081f8:	00000000 	.word	0x00000000
 80081fc:	20000038 	.word	0x20000038
 8008200:	08009054 	.word	0x08009054

08008204 <strlen>:
 8008204:	4603      	mov	r3, r0
 8008206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1fb      	bne.n	8008206 <strlen+0x2>
 800820e:	1a18      	subs	r0, r3, r0
 8008210:	3801      	subs	r0, #1
 8008212:	4770      	bx	lr

08008214 <RCC_GetPCLK1Value>:
*        Handles all possible prescaler configurations
*        Defaults to 16MHz (HSI) if clock source not configured
*/

uint32_t RCC_GetPCLK1Value(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800821a:	4b25      	ldr	r3, [pc, #148]	; (80082b0 <RCC_GetPCLK1Value+0x9c>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	089b      	lsrs	r3, r3, #2
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8008228:	7a7b      	ldrb	r3, [r7, #9]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d102      	bne.n	8008234 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800822e:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <RCC_GetPCLK1Value+0xa0>)
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e00b      	b.n	800824c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8008234:	7a7b      	ldrb	r3, [r7, #9]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d102      	bne.n	8008240 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800823a:	4b1f      	ldr	r3, [pc, #124]	; (80082b8 <RCC_GetPCLK1Value+0xa4>)
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e005      	b.n	800824c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8008240:	7a7b      	ldrb	r3, [r7, #9]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d102      	bne.n	800824c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8008246:	f000 f83d 	bl	80082c4 <RCC_GetPLLOutputClock>
 800824a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 800824c:	4b18      	ldr	r3, [pc, #96]	; (80082b0 <RCC_GetPCLK1Value+0x9c>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	091b      	lsrs	r3, r3, #4
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800825a:	7a3b      	ldrb	r3, [r7, #8]
 800825c:	2b07      	cmp	r3, #7
 800825e:	d802      	bhi.n	8008266 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8008260:	2301      	movs	r3, #1
 8008262:	72fb      	strb	r3, [r7, #11]
 8008264:	e005      	b.n	8008272 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8008266:	7a3b      	ldrb	r3, [r7, #8]
 8008268:	3b08      	subs	r3, #8
 800826a:	4a14      	ldr	r2, [pc, #80]	; (80082bc <RCC_GetPCLK1Value+0xa8>)
 800826c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008270:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8008272:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <RCC_GetPCLK1Value+0x9c>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	0a9b      	lsrs	r3, r3, #10
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8008280:	7a3b      	ldrb	r3, [r7, #8]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d802      	bhi.n	800828c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8008286:	2301      	movs	r3, #1
 8008288:	72bb      	strb	r3, [r7, #10]
 800828a:	e004      	b.n	8008296 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800828c:	7a3b      	ldrb	r3, [r7, #8]
 800828e:	3b04      	subs	r3, #4
 8008290:	4a0b      	ldr	r2, [pc, #44]	; (80082c0 <RCC_GetPCLK1Value+0xac>)
 8008292:	5cd3      	ldrb	r3, [r2, r3]
 8008294:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	fbb2 f2f3 	udiv	r2, r2, r3
 800829e:	7abb      	ldrb	r3, [r7, #10]
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	607b      	str	r3, [r7, #4]

	return pclk1;
 80082a6:	687b      	ldr	r3, [r7, #4]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40023800 	.word	0x40023800
 80082b4:	00f42400 	.word	0x00f42400
 80082b8:	007a1200 	.word	0x007a1200
 80082bc:	20000000 	.word	0x20000000
 80082c0:	20000010 	.word	0x20000010

080082c4 <RCC_GetPLLOutputClock>:
*        - PLL source (HSI/HSE)
*        - PLLM, PLLN, PLLP, PLLQ factors
*        - PLL configuration bits in RCC registers
*/
uint32_t  RCC_GetPLLOutputClock()
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0

	return 0;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <DelayMS>:
  *         COUNTFLAG to be set. The system clock must be configured correctly
  *         for the delay to be accurate.
  */

void DelayMS(int delay)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD	= SYSTICK_LOAD_VAL;
 80082dc:	4b11      	ldr	r3, [pc, #68]	; (8008324 <DelayMS+0x50>)
 80082de:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80082e2:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 80082e4:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <DelayMS+0x50>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 80082ea:	4b0e      	ldr	r3, [pc, #56]	; (8008324 <DelayMS+0x50>)
 80082ec:	2205      	movs	r2, #5
 80082ee:	601a      	str	r2, [r3, #0]
	for(int i=0; i<delay ; i++){
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e009      	b.n	800830a <DelayMS+0x36>

		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG) == 0){}
 80082f6:	bf00      	nop
 80082f8:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <DelayMS+0x50>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0f9      	beq.n	80082f8 <DelayMS+0x24>
	for(int i=0; i<delay ; i++){
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3301      	adds	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	429a      	cmp	r2, r3
 8008310:	dbf1      	blt.n	80082f6 <DelayMS+0x22>
	}
	SysTick->CTRL = 0;
 8008312:	4b04      	ldr	r3, [pc, #16]	; (8008324 <DelayMS+0x50>)
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	e000e010 	.word	0xe000e010

08008328 <GPIO_Init>:
  *         - GPIO pull-up/pull-down
  *         - Alternate function selection
  *         - Interrupt configuration if applicable
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8008328:	b590      	push	{r4, r7, lr}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]
	 GPIO_DeInit(pGPIOHandle->pGPIOx);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fac5 	bl	80088c8 <GPIO_DeInit>
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2101      	movs	r1, #1
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f9d7 	bl	80086f8 <GPIO_PeriClockControl>

	//Pin Configuration
	switch (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	795b      	ldrb	r3, [r3, #5]
 800834e:	2b06      	cmp	r3, #6
 8008350:	f200 80d1 	bhi.w	80084f6 <GPIO_Init+0x1ce>
 8008354:	a201      	add	r2, pc, #4	; (adr r2, 800835c <GPIO_Init+0x34>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	080083f1 	.word	0x080083f1
 8008360:	0800842f 	.word	0x0800842f
 8008364:	080083b5 	.word	0x080083b5
 8008368:	08008379 	.word	0x08008379
 800836c:	0800846b 	.word	0x0800846b
 8008370:	0800849b 	.word	0x0800849b
 8008374:	080084cb 	.word	0x080084cb
	case GPIO_MODE_ANALOG: {
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	2103      	movs	r1, #3
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	43db      	mvns	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	400a      	ands	r2, r1
 8008394:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	2103      	movs	r1, #3
 80083a4:	fa01 f303 	lsl.w	r3, r1, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	601a      	str	r2, [r3, #0]
		break;
 80083b2:	e0a1      	b.n	80084f8 <GPIO_Init+0x1d0>
	}
	case GPIO_MODE_ALTFN: {
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	791b      	ldrb	r3, [r3, #4]
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	2103      	movs	r1, #3
 80083c2:	fa01 f303 	lsl.w	r3, r1, r3
 80083c6:	43db      	mvns	r3, r3
 80083c8:	4619      	mov	r1, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	400a      	ands	r2, r1
 80083d0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x2<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	791b      	ldrb	r3, [r3, #4]
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	2102      	movs	r1, #2
 80083e0:	fa01 f303 	lsl.w	r3, r1, r3
 80083e4:	4619      	mov	r1, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]
		break;
 80083ee:	e083      	b.n	80084f8 <GPIO_Init+0x1d0>
	}
	case GPIO_MODE_IN:
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	791b      	ldrb	r3, [r3, #4]
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	2103      	movs	r1, #3
 80083fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008402:	43db      	mvns	r3, r3
 8008404:	4619      	mov	r1, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	400a      	ands	r2, r1
 800840c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER &= ~(0x1<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	791b      	ldrb	r3, [r3, #4]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	2101      	movs	r1, #1
 800841c:	fa01 f303 	lsl.w	r3, r1, r3
 8008420:	43db      	mvns	r3, r3
 8008422:	4619      	mov	r1, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	400a      	ands	r2, r1
 800842a:	601a      	str	r2, [r3, #0]
		break;
 800842c:	e064      	b.n	80084f8 <GPIO_Init+0x1d0>
	}
	case GPIO_MODE_OUT:
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	791b      	ldrb	r3, [r3, #4]
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	2103      	movs	r1, #3
 800843c:	fa01 f303 	lsl.w	r3, r1, r3
 8008440:	43db      	mvns	r3, r3
 8008442:	4619      	mov	r1, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	400a      	ands	r2, r1
 800844a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x1<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	791b      	ldrb	r3, [r3, #4]
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	2101      	movs	r1, #1
 800845a:	fa01 f303 	lsl.w	r3, r1, r3
 800845e:	4619      	mov	r1, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	601a      	str	r2, [r3, #0]
		break;
 8008468:	e046      	b.n	80084f8 <GPIO_Init+0x1d0>
	}
	case GPIO_MODE_IT_FT:
	{
		EXTI->FTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800846a:	4b97      	ldr	r3, [pc, #604]	; (80086c8 <GPIO_Init+0x3a0>)
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	7912      	ldrb	r2, [r2, #4]
 8008472:	4611      	mov	r1, r2
 8008474:	2201      	movs	r2, #1
 8008476:	408a      	lsls	r2, r1
 8008478:	4611      	mov	r1, r2
 800847a:	4a93      	ldr	r2, [pc, #588]	; (80086c8 <GPIO_Init+0x3a0>)
 800847c:	430b      	orrs	r3, r1
 800847e:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR&=~(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));//Clearing Rising Intrupt line
 8008480:	4b91      	ldr	r3, [pc, #580]	; (80086c8 <GPIO_Init+0x3a0>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7912      	ldrb	r2, [r2, #4]
 8008488:	4611      	mov	r1, r2
 800848a:	2201      	movs	r2, #1
 800848c:	408a      	lsls	r2, r1
 800848e:	43d2      	mvns	r2, r2
 8008490:	4611      	mov	r1, r2
 8008492:	4a8d      	ldr	r2, [pc, #564]	; (80086c8 <GPIO_Init+0x3a0>)
 8008494:	400b      	ands	r3, r1
 8008496:	6093      	str	r3, [r2, #8]
		break;
 8008498:	e02e      	b.n	80084f8 <GPIO_Init+0x1d0>
	}
	case GPIO_MODE_IT_RT:
	{
		EXTI->RTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800849a:	4b8b      	ldr	r3, [pc, #556]	; (80086c8 <GPIO_Init+0x3a0>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	7912      	ldrb	r2, [r2, #4]
 80084a2:	4611      	mov	r1, r2
 80084a4:	2201      	movs	r2, #1
 80084a6:	408a      	lsls	r2, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	4a87      	ldr	r2, [pc, #540]	; (80086c8 <GPIO_Init+0x3a0>)
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6093      	str	r3, [r2, #8]
		EXTI->FTSR&=~(0x01<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));// Clearing the falling intrupt line
 80084b0:	4b85      	ldr	r3, [pc, #532]	; (80086c8 <GPIO_Init+0x3a0>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	7912      	ldrb	r2, [r2, #4]
 80084b8:	4611      	mov	r1, r2
 80084ba:	2201      	movs	r2, #1
 80084bc:	408a      	lsls	r2, r1
 80084be:	43d2      	mvns	r2, r2
 80084c0:	4611      	mov	r1, r2
 80084c2:	4a81      	ldr	r2, [pc, #516]	; (80086c8 <GPIO_Init+0x3a0>)
 80084c4:	400b      	ands	r3, r1
 80084c6:	60d3      	str	r3, [r2, #12]
		break;
 80084c8:	e016      	b.n	80084f8 <GPIO_Init+0x1d0>
	}
	case GPIO_MODE_IT_RFT:
	{
		EXTI->RTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80084ca:	4b7f      	ldr	r3, [pc, #508]	; (80086c8 <GPIO_Init+0x3a0>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	7912      	ldrb	r2, [r2, #4]
 80084d2:	4611      	mov	r1, r2
 80084d4:	2201      	movs	r2, #1
 80084d6:	408a      	lsls	r2, r1
 80084d8:	4611      	mov	r1, r2
 80084da:	4a7b      	ldr	r2, [pc, #492]	; (80086c8 <GPIO_Init+0x3a0>)
 80084dc:	430b      	orrs	r3, r1
 80084de:	6093      	str	r3, [r2, #8]
		EXTI->FTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));// Clearing the falling intrupt line
 80084e0:	4b79      	ldr	r3, [pc, #484]	; (80086c8 <GPIO_Init+0x3a0>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	7912      	ldrb	r2, [r2, #4]
 80084e8:	4611      	mov	r1, r2
 80084ea:	2201      	movs	r2, #1
 80084ec:	408a      	lsls	r2, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	4a75      	ldr	r2, [pc, #468]	; (80086c8 <GPIO_Init+0x3a0>)
 80084f2:	430b      	orrs	r3, r1
 80084f4:	60d3      	str	r3, [r2, #12]
	}
	default: {
		break;
 80084f6:	bf00      	nop
	}

	}
	//2. configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	799b      	ldrb	r3, [r3, #6]
 80084fc:	461a      	mov	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	791b      	ldrb	r3, [r3, #4]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	60fb      	str	r3, [r7, #12]
	(pGPIOHandle->pGPIOx->OSPEEDR) &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	791b      	ldrb	r3, [r3, #4]
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	2103      	movs	r1, #3
 8008518:	fa01 f303 	lsl.w	r3, r1, r3
 800851c:	43db      	mvns	r3, r3
 800851e:	4619      	mov	r1, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	400a      	ands	r2, r1
 8008526:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6899      	ldr	r1, [r3, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	430a      	orrs	r2, r1
 8008536:	609a      	str	r2, [r3, #8]

	//Pull Push Configuration
	temp=0;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	79db      	ldrb	r3, [r3, #7]
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	791b      	ldrb	r3, [r3, #4]
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	fa02 f303 	lsl.w	r3, r2, r3
 800854c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR|= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	791b      	ldrb	r3, [r3, #4]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	2103      	movs	r1, #3
 800855c:	fa01 f303 	lsl.w	r3, r1, r3
 8008560:	43db      	mvns	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR|=temp;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68d9      	ldr	r1, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	430a      	orrs	r2, r1
 800857a:	60da      	str	r2, [r3, #12]
//	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
//	pGPIOHandle->pGPIOx->OTYPER|= ~(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
//	pGPIOHandle->pGPIOx->OTYPER|=temp;
//
	//Alternative Functionality Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode==GPIO_MODE_ALTFN)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7a5b      	ldrb	r3, [r3, #9]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d138      	bne.n	80085f6 <GPIO_Init+0x2ce>
	{
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]&=~(0xF<<(4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8)));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7912      	ldrb	r2, [r2, #4]
 800858c:	08d2      	lsrs	r2, r2, #3
 800858e:	b2d0      	uxtb	r0, r2
 8008590:	4602      	mov	r2, r0
 8008592:	3208      	adds	r2, #8
 8008594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	791b      	ldrb	r3, [r3, #4]
 800859c:	f003 0307 	and.w	r3, r3, #7
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	210f      	movs	r1, #15
 80085a4:	fa01 f303 	lsl.w	r3, r1, r3
 80085a8:	43db      	mvns	r3, r3
 80085aa:	4619      	mov	r1, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4011      	ands	r1, r2
 80085b2:	f100 0208 	add.w	r2, r0, #8
 80085b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]|=(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)<<(4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	7912      	ldrb	r2, [r2, #4]
 80085c2:	08d2      	lsrs	r2, r2, #3
 80085c4:	b2d1      	uxtb	r1, r2
 80085c6:	460a      	mov	r2, r1
 80085c8:	3208      	adds	r2, #8
 80085ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	791b      	ldrb	r3, [r3, #4]
 80085d2:	4618      	mov	r0, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	791b      	ldrb	r3, [r3, #4]
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	fa00 f303 	lsl.w	r3, r0, r3
 80085e2:	461c      	mov	r4, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4608      	mov	r0, r1
 80085ea:	ea42 0104 	orr.w	r1, r2, r4
 80085ee:	f100 0208 	add.w	r2, r0, #8
 80085f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	//2. configure the GPIO port selection in SYSCFG_EXTICR
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	089b      	lsrs	r3, r3, #2
 80085fc:	72fb      	strb	r3, [r7, #11]
	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	f003 0303 	and.w	r3, r3, #3
 8008606:	72bb      	strb	r3, [r7, #10]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a2f      	ldr	r2, [pc, #188]	; (80086cc <GPIO_Init+0x3a4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d039      	beq.n	8008686 <GPIO_Init+0x35e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a2e      	ldr	r2, [pc, #184]	; (80086d0 <GPIO_Init+0x3a8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d032      	beq.n	8008682 <GPIO_Init+0x35a>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a2c      	ldr	r2, [pc, #176]	; (80086d4 <GPIO_Init+0x3ac>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d02b      	beq.n	800867e <GPIO_Init+0x356>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a2b      	ldr	r2, [pc, #172]	; (80086d8 <GPIO_Init+0x3b0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d024      	beq.n	800867a <GPIO_Init+0x352>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a29      	ldr	r2, [pc, #164]	; (80086dc <GPIO_Init+0x3b4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d01d      	beq.n	8008676 <GPIO_Init+0x34e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a28      	ldr	r2, [pc, #160]	; (80086e0 <GPIO_Init+0x3b8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d016      	beq.n	8008672 <GPIO_Init+0x34a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a26      	ldr	r2, [pc, #152]	; (80086e4 <GPIO_Init+0x3bc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00f      	beq.n	800866e <GPIO_Init+0x346>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <GPIO_Init+0x3c0>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d008      	beq.n	800866a <GPIO_Init+0x342>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a23      	ldr	r2, [pc, #140]	; (80086ec <GPIO_Init+0x3c4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d101      	bne.n	8008666 <GPIO_Init+0x33e>
 8008662:	2308      	movs	r3, #8
 8008664:	e010      	b.n	8008688 <GPIO_Init+0x360>
 8008666:	2300      	movs	r3, #0
 8008668:	e00e      	b.n	8008688 <GPIO_Init+0x360>
 800866a:	2307      	movs	r3, #7
 800866c:	e00c      	b.n	8008688 <GPIO_Init+0x360>
 800866e:	2306      	movs	r3, #6
 8008670:	e00a      	b.n	8008688 <GPIO_Init+0x360>
 8008672:	2305      	movs	r3, #5
 8008674:	e008      	b.n	8008688 <GPIO_Init+0x360>
 8008676:	2304      	movs	r3, #4
 8008678:	e006      	b.n	8008688 <GPIO_Init+0x360>
 800867a:	2303      	movs	r3, #3
 800867c:	e004      	b.n	8008688 <GPIO_Init+0x360>
 800867e:	2302      	movs	r3, #2
 8008680:	e002      	b.n	8008688 <GPIO_Init+0x360>
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <GPIO_Init+0x360>
 8008686:	2300      	movs	r3, #0
 8008688:	727b      	strb	r3, [r7, #9]
	SYSCFG_PCLK_EN();
 800868a:	4b19      	ldr	r3, [pc, #100]	; (80086f0 <GPIO_Init+0x3c8>)
 800868c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868e:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <GPIO_Init+0x3c8>)
 8008690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008694:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8008696:	7a7a      	ldrb	r2, [r7, #9]
 8008698:	7abb      	ldrb	r3, [r7, #10]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	fa02 f103 	lsl.w	r1, r2, r3
 80086a0:	4a14      	ldr	r2, [pc, #80]	; (80086f4 <GPIO_Init+0x3cc>)
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	3302      	adds	r3, #2
 80086a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	//3 . enable the exti interrupt delivery using IMR
	EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <GPIO_Init+0x3a0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	7912      	ldrb	r2, [r2, #4]
 80086b2:	4611      	mov	r1, r2
 80086b4:	2201      	movs	r2, #1
 80086b6:	408a      	lsls	r2, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	4a03      	ldr	r2, [pc, #12]	; (80086c8 <GPIO_Init+0x3a0>)
 80086bc:	430b      	orrs	r3, r1
 80086be:	6013      	str	r3, [r2, #0]
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd90      	pop	{r4, r7, pc}
 80086c8:	40013c00 	.word	0x40013c00
 80086cc:	40020000 	.word	0x40020000
 80086d0:	40020400 	.word	0x40020400
 80086d4:	40020800 	.word	0x40020800
 80086d8:	40020c00 	.word	0x40020c00
 80086dc:	40021000 	.word	0x40021000
 80086e0:	40021400 	.word	0x40021400
 80086e4:	40021800 	.word	0x40021800
 80086e8:	40021c00 	.word	0x40021c00
 80086ec:	40022000 	.word	0x40022000
 80086f0:	40023800 	.word	0x40023800
 80086f4:	40013800 	.word	0x40013800

080086f8 <GPIO_PeriClockControl>:
*
* @note  Enables or disables the clock for the specified GPIO port
*        using RCC registers. Supports all GPIO ports (A-I)
*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d162      	bne.n	80087d0 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a64      	ldr	r2, [pc, #400]	; (80088a0 <GPIO_PeriClockControl+0x1a8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d106      	bne.n	8008720 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8008712:	4b64      	ldr	r3, [pc, #400]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	4a63      	ldr	r2, [pc, #396]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	6313      	str	r3, [r2, #48]	; 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 800871e:	e0b9      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a61      	ldr	r2, [pc, #388]	; (80088a8 <GPIO_PeriClockControl+0x1b0>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d106      	bne.n	8008736 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8008728:	4b5e      	ldr	r3, [pc, #376]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	4a5d      	ldr	r2, [pc, #372]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800872e:	f043 0302 	orr.w	r3, r3, #2
 8008732:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008734:	e0ae      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a5c      	ldr	r2, [pc, #368]	; (80088ac <GPIO_PeriClockControl+0x1b4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d106      	bne.n	800874c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800873e:	4b59      	ldr	r3, [pc, #356]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	4a58      	ldr	r2, [pc, #352]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008744:	f043 0304 	orr.w	r3, r3, #4
 8008748:	6313      	str	r3, [r2, #48]	; 0x30
}
 800874a:	e0a3      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a58      	ldr	r2, [pc, #352]	; (80088b0 <GPIO_PeriClockControl+0x1b8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d106      	bne.n	8008762 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8008754:	4b53      	ldr	r3, [pc, #332]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	4a52      	ldr	r2, [pc, #328]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800875a:	f043 0308 	orr.w	r3, r3, #8
 800875e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008760:	e098      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a53      	ldr	r2, [pc, #332]	; (80088b4 <GPIO_PeriClockControl+0x1bc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d106      	bne.n	8008778 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800876a:	4b4e      	ldr	r3, [pc, #312]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	4a4d      	ldr	r2, [pc, #308]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008770:	f043 0310 	orr.w	r3, r3, #16
 8008774:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008776:	e08d      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a4f      	ldr	r2, [pc, #316]	; (80088b8 <GPIO_PeriClockControl+0x1c0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d106      	bne.n	800878e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8008780:	4b48      	ldr	r3, [pc, #288]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	4a47      	ldr	r2, [pc, #284]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008786:	f043 0320 	orr.w	r3, r3, #32
 800878a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800878c:	e082      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a4a      	ldr	r2, [pc, #296]	; (80088bc <GPIO_PeriClockControl+0x1c4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d106      	bne.n	80087a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8008796:	4b43      	ldr	r3, [pc, #268]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	4a42      	ldr	r2, [pc, #264]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800879c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80087a2:	e077      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a46      	ldr	r2, [pc, #280]	; (80088c0 <GPIO_PeriClockControl+0x1c8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d106      	bne.n	80087ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80087ac:	4b3d      	ldr	r3, [pc, #244]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b0:	4a3c      	ldr	r2, [pc, #240]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80087b8:	e06c      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a41      	ldr	r2, [pc, #260]	; (80088c4 <GPIO_PeriClockControl+0x1cc>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d168      	bne.n	8008894 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80087c2:	4b38      	ldr	r3, [pc, #224]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	4a37      	ldr	r2, [pc, #220]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80087ce:	e061      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a33      	ldr	r2, [pc, #204]	; (80088a0 <GPIO_PeriClockControl+0x1a8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d106      	bne.n	80087e6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80087d8:	4b32      	ldr	r3, [pc, #200]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	4a31      	ldr	r2, [pc, #196]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80087e4:	e056      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2f      	ldr	r2, [pc, #188]	; (80088a8 <GPIO_PeriClockControl+0x1b0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d106      	bne.n	80087fc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80087ee:	4b2d      	ldr	r3, [pc, #180]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f2:	4a2c      	ldr	r2, [pc, #176]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 80087f4:	f023 0302 	bic.w	r3, r3, #2
 80087f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80087fa:	e04b      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a2b      	ldr	r2, [pc, #172]	; (80088ac <GPIO_PeriClockControl+0x1b4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d106      	bne.n	8008812 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8008804:	4b27      	ldr	r3, [pc, #156]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	4a26      	ldr	r2, [pc, #152]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800880a:	f023 0304 	bic.w	r3, r3, #4
 800880e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008810:	e040      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a26      	ldr	r2, [pc, #152]	; (80088b0 <GPIO_PeriClockControl+0x1b8>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d106      	bne.n	8008828 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800881a:	4b22      	ldr	r3, [pc, #136]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881e:	4a21      	ldr	r2, [pc, #132]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008820:	f023 0308 	bic.w	r3, r3, #8
 8008824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008826:	e035      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a22      	ldr	r2, [pc, #136]	; (80088b4 <GPIO_PeriClockControl+0x1bc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d106      	bne.n	800883e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8008830:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008834:	4a1b      	ldr	r2, [pc, #108]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008836:	f023 0310 	bic.w	r3, r3, #16
 800883a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800883c:	e02a      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a1d      	ldr	r2, [pc, #116]	; (80088b8 <GPIO_PeriClockControl+0x1c0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d106      	bne.n	8008854 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8008846:	4b17      	ldr	r3, [pc, #92]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	4a16      	ldr	r2, [pc, #88]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800884c:	f023 0320 	bic.w	r3, r3, #32
 8008850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008852:	e01f      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a19      	ldr	r2, [pc, #100]	; (80088bc <GPIO_PeriClockControl+0x1c4>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d106      	bne.n	800886a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800885c:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	4a10      	ldr	r2, [pc, #64]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008868:	e014      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a14      	ldr	r2, [pc, #80]	; (80088c0 <GPIO_PeriClockControl+0x1c8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d106      	bne.n	8008880 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	4a0b      	ldr	r2, [pc, #44]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 8008878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800887c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800887e:	e009      	b.n	8008894 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a10      	ldr	r2, [pc, #64]	; (80088c4 <GPIO_PeriClockControl+0x1cc>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d105      	bne.n	8008894 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	4a05      	ldr	r2, [pc, #20]	; (80088a4 <GPIO_PeriClockControl+0x1ac>)
 800888e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	40020000 	.word	0x40020000
 80088a4:	40023800 	.word	0x40023800
 80088a8:	40020400 	.word	0x40020400
 80088ac:	40020800 	.word	0x40020800
 80088b0:	40020c00 	.word	0x40020c00
 80088b4:	40021000 	.word	0x40021000
 80088b8:	40021400 	.word	0x40021400
 80088bc:	40021800 	.word	0x40021800
 80088c0:	40021c00 	.word	0x40021c00
 80088c4:	40022000 	.word	0x40022000

080088c8 <GPIO_DeInit>:
*
* @note  Performs a peripheral reset through the RCC registers
*        Supports all GPIO ports (A-I)
*/
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	if(pGPIOx == GPIOA)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a4e      	ldr	r2, [pc, #312]	; (8008a0c <GPIO_DeInit+0x144>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d10c      	bne.n	80088f2 <GPIO_DeInit+0x2a>
	{
		GPIOA_REG_RESET();
 80088d8:	4b4d      	ldr	r3, [pc, #308]	; (8008a10 <GPIO_DeInit+0x148>)
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	4a4c      	ldr	r2, [pc, #304]	; (8008a10 <GPIO_DeInit+0x148>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	6113      	str	r3, [r2, #16]
 80088e4:	4b4a      	ldr	r3, [pc, #296]	; (8008a10 <GPIO_DeInit+0x148>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	4a49      	ldr	r2, [pc, #292]	; (8008a10 <GPIO_DeInit+0x148>)
 80088ea:	f023 0301 	bic.w	r3, r3, #1
 80088ee:	6113      	str	r3, [r2, #16]
	}else if (pGPIOx == GPIOI)
	{
		GPIOI_REG_RESET();
	}

}
 80088f0:	e086      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOB)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a47      	ldr	r2, [pc, #284]	; (8008a14 <GPIO_DeInit+0x14c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d10c      	bne.n	8008914 <GPIO_DeInit+0x4c>
		GPIOB_REG_RESET();
 80088fa:	4b45      	ldr	r3, [pc, #276]	; (8008a10 <GPIO_DeInit+0x148>)
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	4a44      	ldr	r2, [pc, #272]	; (8008a10 <GPIO_DeInit+0x148>)
 8008900:	f043 0302 	orr.w	r3, r3, #2
 8008904:	6113      	str	r3, [r2, #16]
 8008906:	4b42      	ldr	r3, [pc, #264]	; (8008a10 <GPIO_DeInit+0x148>)
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	4a41      	ldr	r2, [pc, #260]	; (8008a10 <GPIO_DeInit+0x148>)
 800890c:	f023 0302 	bic.w	r3, r3, #2
 8008910:	6113      	str	r3, [r2, #16]
}
 8008912:	e075      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOC)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a40      	ldr	r2, [pc, #256]	; (8008a18 <GPIO_DeInit+0x150>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d10c      	bne.n	8008936 <GPIO_DeInit+0x6e>
		GPIOC_REG_RESET();
 800891c:	4b3c      	ldr	r3, [pc, #240]	; (8008a10 <GPIO_DeInit+0x148>)
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	4a3b      	ldr	r2, [pc, #236]	; (8008a10 <GPIO_DeInit+0x148>)
 8008922:	f043 0304 	orr.w	r3, r3, #4
 8008926:	6113      	str	r3, [r2, #16]
 8008928:	4b39      	ldr	r3, [pc, #228]	; (8008a10 <GPIO_DeInit+0x148>)
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	4a38      	ldr	r2, [pc, #224]	; (8008a10 <GPIO_DeInit+0x148>)
 800892e:	f023 0304 	bic.w	r3, r3, #4
 8008932:	6113      	str	r3, [r2, #16]
}
 8008934:	e064      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOD)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a38      	ldr	r2, [pc, #224]	; (8008a1c <GPIO_DeInit+0x154>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d10c      	bne.n	8008958 <GPIO_DeInit+0x90>
		GPIOD_REG_RESET();
 800893e:	4b34      	ldr	r3, [pc, #208]	; (8008a10 <GPIO_DeInit+0x148>)
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	4a33      	ldr	r2, [pc, #204]	; (8008a10 <GPIO_DeInit+0x148>)
 8008944:	f043 0308 	orr.w	r3, r3, #8
 8008948:	6113      	str	r3, [r2, #16]
 800894a:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <GPIO_DeInit+0x148>)
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	4a30      	ldr	r2, [pc, #192]	; (8008a10 <GPIO_DeInit+0x148>)
 8008950:	f023 0308 	bic.w	r3, r3, #8
 8008954:	6113      	str	r3, [r2, #16]
}
 8008956:	e053      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a31      	ldr	r2, [pc, #196]	; (8008a20 <GPIO_DeInit+0x158>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10c      	bne.n	800897a <GPIO_DeInit+0xb2>
		GPIOE_REG_RESET();
 8008960:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <GPIO_DeInit+0x148>)
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	4a2a      	ldr	r2, [pc, #168]	; (8008a10 <GPIO_DeInit+0x148>)
 8008966:	f043 0310 	orr.w	r3, r3, #16
 800896a:	6113      	str	r3, [r2, #16]
 800896c:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <GPIO_DeInit+0x148>)
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <GPIO_DeInit+0x148>)
 8008972:	f023 0310 	bic.w	r3, r3, #16
 8008976:	6113      	str	r3, [r2, #16]
}
 8008978:	e042      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOF)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a29      	ldr	r2, [pc, #164]	; (8008a24 <GPIO_DeInit+0x15c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d10c      	bne.n	800899c <GPIO_DeInit+0xd4>
		GPIOF_REG_RESET();
 8008982:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <GPIO_DeInit+0x148>)
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	4a22      	ldr	r2, [pc, #136]	; (8008a10 <GPIO_DeInit+0x148>)
 8008988:	f043 0320 	orr.w	r3, r3, #32
 800898c:	6113      	str	r3, [r2, #16]
 800898e:	4b20      	ldr	r3, [pc, #128]	; (8008a10 <GPIO_DeInit+0x148>)
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	4a1f      	ldr	r2, [pc, #124]	; (8008a10 <GPIO_DeInit+0x148>)
 8008994:	f023 0320 	bic.w	r3, r3, #32
 8008998:	6113      	str	r3, [r2, #16]
}
 800899a:	e031      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOG)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a22      	ldr	r2, [pc, #136]	; (8008a28 <GPIO_DeInit+0x160>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d10c      	bne.n	80089be <GPIO_DeInit+0xf6>
		GPIOG_REG_RESET();
 80089a4:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <GPIO_DeInit+0x148>)
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	4a19      	ldr	r2, [pc, #100]	; (8008a10 <GPIO_DeInit+0x148>)
 80089aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ae:	6113      	str	r3, [r2, #16]
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <GPIO_DeInit+0x148>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	4a16      	ldr	r2, [pc, #88]	; (8008a10 <GPIO_DeInit+0x148>)
 80089b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ba:	6113      	str	r3, [r2, #16]
}
 80089bc:	e020      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOH)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a1a      	ldr	r2, [pc, #104]	; (8008a2c <GPIO_DeInit+0x164>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d10c      	bne.n	80089e0 <GPIO_DeInit+0x118>
		GPIOH_REG_RESET();
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <GPIO_DeInit+0x148>)
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	4a11      	ldr	r2, [pc, #68]	; (8008a10 <GPIO_DeInit+0x148>)
 80089cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d0:	6113      	str	r3, [r2, #16]
 80089d2:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <GPIO_DeInit+0x148>)
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	4a0e      	ldr	r2, [pc, #56]	; (8008a10 <GPIO_DeInit+0x148>)
 80089d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089dc:	6113      	str	r3, [r2, #16]
}
 80089de:	e00f      	b.n	8008a00 <GPIO_DeInit+0x138>
	}else if (pGPIOx == GPIOI)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a13      	ldr	r2, [pc, #76]	; (8008a30 <GPIO_DeInit+0x168>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10b      	bne.n	8008a00 <GPIO_DeInit+0x138>
		GPIOI_REG_RESET();
 80089e8:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <GPIO_DeInit+0x148>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <GPIO_DeInit+0x148>)
 80089ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089f2:	6113      	str	r3, [r2, #16]
 80089f4:	4b06      	ldr	r3, [pc, #24]	; (8008a10 <GPIO_DeInit+0x148>)
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	4a05      	ldr	r2, [pc, #20]	; (8008a10 <GPIO_DeInit+0x148>)
 80089fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089fe:	6113      	str	r3, [r2, #16]
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	40020000 	.word	0x40020000
 8008a10:	40023800 	.word	0x40023800
 8008a14:	40020400 	.word	0x40020400
 8008a18:	40020800 	.word	0x40020800
 8008a1c:	40020c00 	.word	0x40020c00
 8008a20:	40021000 	.word	0x40021000
 8008a24:	40021400 	.word	0x40021400
 8008a28:	40021800 	.word	0x40021800
 8008a2c:	40021c00 	.word	0x40021c00
 8008a30:	40022000 	.word	0x40022000

08008a34 <GPIO_ReadFromInputPin>:
* @note  Reads from the GPIO input data register (IDR)
*        Masks and shifts to get only the specified pin's state
*/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
	uint8_t data=(uint8_t)(((pGPIOx->IDR)>>PinNumber)&0x01);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	73fb      	strb	r3, [r7, #15]
	return data;
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <I2C_GenerateStartCondition>:
*
* @note  Sets START bit in CR1 register
*        Must be called in master mode
*/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	Set_Bit(pI2Cx->CR1,I2C_CR1_START);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	601a      	str	r2, [r3, #0]
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <I2C_ExecuteAddressPhaseWrite>:
* @note  Shifts address left by 1 and clears LSB for write operation
*        Loads address into DR register
*/

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	f023 0301 	bic.w	r3, r3, #1
 8008a98:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	611a      	str	r2, [r3, #16]
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <I2C_ClearADDRFlag>:
*
* @note  Implements proper sequence to clear ADDR flag
*        Handles special cases for single byte reception
*/
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	I2C_State_en I2C_state=pI2CHandle->TxRxState;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	7f1b      	ldrb	r3, [r3, #28]
 8008ab8:	73fb      	strb	r3, [r7, #15]
	//check for device mode
	if(isBit_Set(pI2CHandle->pI2Cx->SR2,I2C_SR2_MSL))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01e      	beq.n	8008b06 <I2C_ClearADDRFlag+0x5a>
	{
		//device is in master mode
		if( I2C_state== I2C_BUSY_IN_RX)
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d112      	bne.n	8008af4 <I2C_ClearADDRFlag+0x48>
		{
			if(pI2CHandle->RxSize  == 1)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d11f      	bne.n	8008b16 <I2C_ClearADDRFlag+0x6a>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 f9cc 	bl	8008e7a <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	60bb      	str	r3, [r7, #8]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	60bb      	str	r3, [r7, #8]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8008af2:	e010      	b.n	8008b16 <I2C_ClearADDRFlag+0x6a>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	60bb      	str	r3, [r7, #8]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	60bb      	str	r3, [r7, #8]
}
 8008b04:	e007      	b.n	8008b16 <I2C_ClearADDRFlag+0x6a>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	60bb      	str	r3, [r7, #8]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	60bb      	str	r3, [r7, #8]
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <I2C_GenerateStopCondition>:
*
* @note  Sets STOP bit in CR1 register
*        Can be called in master or slave mode
*/
 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
	 Set_Bit(pI2Cx->CR1,I2C_CR1_STOP);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	601a      	str	r2, [r3, #0]
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <I2C_PeripheralControl>:
 *
 * @note  Controls PE bit in CR1 register
 *        Must be enabled before any communication
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d106      	bne.n	8008b5e <I2C_PeripheralControl+0x20>
	{
		Set_Bit(pI2Cx->CR1,I2C_CR1_PE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f043 0201 	orr.w	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	601a      	str	r2, [r3, #0]
	}else
	{
		Reset_Bit(pI2Cx->CR1,I2C_CR1_PE);
	}

}
 8008b5c:	e005      	b.n	8008b6a <I2C_PeripheralControl+0x2c>
		Reset_Bit(pI2Cx->CR1,I2C_CR1_PE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f023 0201 	bic.w	r2, r3, #1
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <I2C_PeriClockControl>:
*
* @note  Controls clock for all supported I2C peripherals (I2C1-I2C3)
*        Uses RCC registers to enable/disable clocks
*/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d120      	bne.n	8008bcc <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a22      	ldr	r2, [pc, #136]	; (8008c18 <I2C_PeriClockControl+0xa0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d106      	bne.n	8008ba0 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8008b92:	4b22      	ldr	r3, [pc, #136]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	4a21      	ldr	r2, [pc, #132]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b9c:	6413      	str	r3, [r2, #64]	; 0x40
		{
			I2C3_PCLK_DI();
		}
	}

}
 8008b9e:	e035      	b.n	8008c0c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <I2C_PeriClockControl+0xa8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d106      	bne.n	8008bb6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8008ba8:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bac:	4a1b      	ldr	r2, [pc, #108]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008bb4:	e02a      	b.n	8008c0c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a1a      	ldr	r2, [pc, #104]	; (8008c24 <I2C_PeriClockControl+0xac>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d126      	bne.n	8008c0c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8008bbe:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	4a16      	ldr	r2, [pc, #88]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008bca:	e01f      	b.n	8008c0c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a12      	ldr	r2, [pc, #72]	; (8008c18 <I2C_PeriClockControl+0xa0>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d106      	bne.n	8008be2 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8008bd4:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	4a10      	ldr	r2, [pc, #64]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008be0:	e014      	b.n	8008c0c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a0e      	ldr	r2, [pc, #56]	; (8008c20 <I2C_PeriClockControl+0xa8>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d106      	bne.n	8008bf8 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	4a0b      	ldr	r2, [pc, #44]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008bf0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008bf4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008bf6:	e009      	b.n	8008c0c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a0a      	ldr	r2, [pc, #40]	; (8008c24 <I2C_PeriClockControl+0xac>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d105      	bne.n	8008c0c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c04:	4a05      	ldr	r2, [pc, #20]	; (8008c1c <I2C_PeriClockControl+0xa4>)
 8008c06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c0a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	40005400 	.word	0x40005400
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40005800 	.word	0x40005800
 8008c24:	40005c00 	.word	0x40005c00

08008c28 <I2C_Init>:
*        - Duty cycle (fast mode only)
*        - Rise time
* Enables peripheral clock before configuration
*/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2101      	movs	r1, #1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff ff9c 	bl	8008b78 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7a5b      	ldrb	r3, [r3, #9]
 8008c44:	029b      	lsls	r3, r3, #10
 8008c46:	461a      	mov	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8008c5a:	f7ff fadb 	bl	8008214 <RCC_GetPCLK1Value>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	4a47      	ldr	r2, [pc, #284]	; (8008d80 <I2C_Init+0x158>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	0c9b      	lsrs	r3, r3, #18
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008c78:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	7a1b      	ldrb	r3, [r3, #8]
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	461a      	mov	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c92:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	4a36      	ldr	r2, [pc, #216]	; (8008d84 <I2C_Init+0x15c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d80f      	bhi.n	8008cce <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8008cae:	f7ff fab1 	bl	8008214 <RCC_GetPCLK1Value>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8008cc0:	897b      	ldrh	r3, [r7, #10]
 8008cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	e02d      	b.n	8008d2a <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7a9b      	ldrb	r3, [r3, #10]
 8008cda:	039b      	lsls	r3, r3, #14
 8008cdc:	461a      	mov	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	7a9b      	ldrb	r3, [r3, #10]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10b      	bne.n	8008d04 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8008cec:	f7ff fa92 	bl	8008214 <RCC_GetPCLK1Value>
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	4413      	add	r3, r2
 8008cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d00:	817b      	strh	r3, [r7, #10]
 8008d02:	e00c      	b.n	8008d1e <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8008d04:	f7ff fa86 	bl	8008214 <RCC_GetPCLK1Value>
 8008d08:	4601      	mov	r1, r0
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009a      	lsls	r2, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d1c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8008d1e:	897b      	ldrh	r3, [r7, #10]
 8008d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4a13      	ldr	r2, [pc, #76]	; (8008d84 <I2C_Init+0x15c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d809      	bhi.n	8008d50 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8008d3c:	f7ff fa6a 	bl	8008214 <RCC_GetPCLK1Value>
 8008d40:	4603      	mov	r3, r0
 8008d42:	4a0f      	ldr	r2, [pc, #60]	; (8008d80 <I2C_Init+0x158>)
 8008d44:	fba2 2303 	umull	r2, r3, r2, r3
 8008d48:	0c9b      	lsrs	r3, r3, #18
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e00d      	b.n	8008d6c <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8008d50:	f7ff fa60 	bl	8008214 <RCC_GetPCLK1Value>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008d5a:	fb02 f303 	mul.w	r3, r2, r3
 8008d5e:	0a5b      	lsrs	r3, r3, #9
 8008d60:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <I2C_Init+0x160>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	09db      	lsrs	r3, r3, #7
 8008d68:	3301      	adds	r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008d76:	621a      	str	r2, [r3, #32]

}
 8008d78:	bf00      	nop
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	431bde83 	.word	0x431bde83
 8008d84:	000186a0 	.word	0x000186a0
 8008d88:	00044b83 	.word	0x00044b83

08008d8c <I2C_GetFlagStatus>:
* @return Flag status (SET or RESET)
*
* @note  Checks status register (SR1) for specified flag
*/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695a      	ldr	r2, [r3, #20]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <I2C_MasterSendData>:
*        3. Data transmission
*        4. STOP condition (if Sr=I2C_DISABLE_SR)
* Blocks until all data is transmitted
*/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fe4a 	bl	8008a60 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8008dcc:	bf00      	nop
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff ffd9 	bl	8008d8c <I2C_GetFlagStatus>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0f6      	beq.n	8008dce <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	4611      	mov	r1, r2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff fe49 	bl	8008a80 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8008dee:	bf00      	nop
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff ffc8 	bl	8008d8c <I2C_GetFlagStatus>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0f6      	beq.n	8008df0 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7ff fe52 	bl	8008aac <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8008e08:	e014      	b.n	8008e34 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8008e0a:	bf00      	nop
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2180      	movs	r1, #128	; 0x80
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff ffba 	bl	8008d8c <I2C_GetFlagStatus>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f6      	beq.n	8008e0c <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	781a      	ldrb	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60bb      	str	r3, [r7, #8]
		Len--;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1e7      	bne.n	8008e0a <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8008e3a:	bf00      	nop
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2180      	movs	r1, #128	; 0x80
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff ffa2 	bl	8008d8c <I2C_GetFlagStatus>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0f6      	beq.n	8008e3c <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8008e4e:	bf00      	nop
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2104      	movs	r1, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7ff ff98 	bl	8008d8c <I2C_GetFlagStatus>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0f6      	beq.n	8008e50 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8008e62:	7e3b      	ldrb	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d104      	bne.n	8008e72 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff fe56 	bl	8008b1e <I2C_GenerateStopCondition>

}
 8008e72:	bf00      	nop
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <I2C_ManageAcking>:
*
* @note  Controls ACK bit in CR1 register
*        Used to enable/disable acknowledgment after byte reception
*/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d106      	bne.n	8008e9a <I2C_ManageAcking+0x20>
	{
		//enable the ack
		Set_Bit(pI2Cx->CR1,I2C_CR1_ACK);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		Reset_Bit(pI2Cx->CR1 ,I2C_CR1_ACK);
	}
}
 8008e98:	e005      	b.n	8008ea6 <I2C_ManageAcking+0x2c>
		Reset_Bit(pI2Cx->CR1 ,I2C_CR1_ACK);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
	...

08008eb4 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 8008eba:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <I2C1_GPIOInits+0x40>)
 8008ebc:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8008eca:	2304      	movs	r3, #4
 8008ecc:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8008ed2:	2306      	movs	r3, #6
 8008ed4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8008ed6:	1d3b      	adds	r3, r7, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fa25 	bl	8008328 <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8008ede:	2309      	movs	r3, #9
 8008ee0:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fa1f 	bl	8008328 <GPIO_Init>


}
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40020400 	.word	0x40020400

08008ef8 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <I2C1_Inits+0x2c>)
 8008efe:	4a0a      	ldr	r2, [pc, #40]	; (8008f28 <I2C1_Inits+0x30>)
 8008f00:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8008f02:	4b08      	ldr	r3, [pc, #32]	; (8008f24 <I2C1_Inits+0x2c>)
 8008f04:	2201      	movs	r2, #1
 8008f06:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <I2C1_Inits+0x2c>)
 8008f0a:	2261      	movs	r2, #97	; 0x61
 8008f0c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <I2C1_Inits+0x2c>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8008f14:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <I2C1_Inits+0x2c>)
 8008f16:	4a05      	ldr	r2, [pc, #20]	; (8008f2c <I2C1_Inits+0x34>)
 8008f18:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8008f1a:	4802      	ldr	r0, [pc, #8]	; (8008f24 <I2C1_Inits+0x2c>)
 8008f1c:	f7ff fe84 	bl	8008c28 <I2C_Init>

}
 8008f20:	bf00      	nop
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000050 	.word	0x20000050
 8008f28:	40005400 	.word	0x40005400
 8008f2c:	000186a0 	.word	0x000186a0

08008f30 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8008f36:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <GPIO_ButtonInit+0x2c>)
 8008f38:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8008f42:	2302      	movs	r3, #2
 8008f44:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8008f46:	2300      	movs	r3, #0
 8008f48:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8008f4a:	1d3b      	adds	r3, r7, #4
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff f9eb 	bl	8008328 <GPIO_Init>

}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40020000 	.word	0x40020000

08008f60 <main>:



int main() {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 8008f66:	f7ff ffe3 	bl	8008f30 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8008f6a:	f7ff ffa3 	bl	8008eb4 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8008f6e:	f7ff ffc3 	bl	8008ef8 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8008f72:	2101      	movs	r1, #1
 8008f74:	480c      	ldr	r0, [pc, #48]	; (8008fa8 <main+0x48>)
 8008f76:	f7ff fde2 	bl	8008b3e <I2C_PeripheralControl>

	while (1) {
		//wait till button is pressed
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 8008f7a:	bf00      	nop
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	480b      	ldr	r0, [pc, #44]	; (8008fac <main+0x4c>)
 8008f80:	f7ff fd58 	bl	8008a34 <GPIO_ReadFromInputPin>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0f8      	beq.n	8008f7c <main+0x1c>
			;

		//to avoid button de-bouncing related issues 200ms of delay
		DelayMS(200);
 8008f8a:	20c8      	movs	r0, #200	; 0xc8
 8008f8c:	f7ff f9a2 	bl	80082d4 <DelayMS>
		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*) some_data),
 8008f90:	4807      	ldr	r0, [pc, #28]	; (8008fb0 <main+0x50>)
 8008f92:	f7ff f937 	bl	8008204 <strlen>
 8008f96:	4602      	mov	r2, r0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2368      	movs	r3, #104	; 0x68
 8008f9e:	4904      	ldr	r1, [pc, #16]	; (8008fb0 <main+0x50>)
 8008fa0:	4804      	ldr	r0, [pc, #16]	; (8008fb4 <main+0x54>)
 8008fa2:	f7ff ff07 	bl	8008db4 <I2C_MasterSendData>
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 8008fa6:	e7e8      	b.n	8008f7a <main+0x1a>
 8008fa8:	40005400 	.word	0x40005400
 8008fac:	40020000 	.word	0x40020000
 8008fb0:	20000014 	.word	0x20000014
 8008fb4:	20000050 	.word	0x20000050

08008fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008fb8:	480d      	ldr	r0, [pc, #52]	; (8008ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008fba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008fbc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fc0:	480c      	ldr	r0, [pc, #48]	; (8008ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008fc2:	490d      	ldr	r1, [pc, #52]	; (8008ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008fc4:	4a0d      	ldr	r2, [pc, #52]	; (8008ffc <LoopForever+0xe>)
  movs r3, #0
 8008fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fc8:	e002      	b.n	8008fd0 <LoopCopyDataInit>

08008fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fce:	3304      	adds	r3, #4

08008fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fd4:	d3f9      	bcc.n	8008fca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fd6:	4a0a      	ldr	r2, [pc, #40]	; (8009000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008fd8:	4c0a      	ldr	r4, [pc, #40]	; (8009004 <LoopForever+0x16>)
  movs r3, #0
 8008fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fdc:	e001      	b.n	8008fe2 <LoopFillZerobss>

08008fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fe0:	3204      	adds	r2, #4

08008fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fe4:	d3fb      	bcc.n	8008fde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008fe6:	f000 f811 	bl	800900c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008fea:	f7ff ffb9 	bl	8008f60 <main>

08008fee <LoopForever>:

LoopForever:
  b LoopForever
 8008fee:	e7fe      	b.n	8008fee <LoopForever>
  ldr   r0, =_estack
 8008ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ff8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8008ffc:	08009074 	.word	0x08009074
  ldr r2, =_sbss
 8009000:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8009004:	20000078 	.word	0x20000078

08009008 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009008:	e7fe      	b.n	8009008 <ADC_IRQHandler>
	...

0800900c <__libc_init_array>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4d0d      	ldr	r5, [pc, #52]	; (8009044 <__libc_init_array+0x38>)
 8009010:	4c0d      	ldr	r4, [pc, #52]	; (8009048 <__libc_init_array+0x3c>)
 8009012:	1b64      	subs	r4, r4, r5
 8009014:	10a4      	asrs	r4, r4, #2
 8009016:	2600      	movs	r6, #0
 8009018:	42a6      	cmp	r6, r4
 800901a:	d109      	bne.n	8009030 <__libc_init_array+0x24>
 800901c:	4d0b      	ldr	r5, [pc, #44]	; (800904c <__libc_init_array+0x40>)
 800901e:	4c0c      	ldr	r4, [pc, #48]	; (8009050 <__libc_init_array+0x44>)
 8009020:	f000 f818 	bl	8009054 <_init>
 8009024:	1b64      	subs	r4, r4, r5
 8009026:	10a4      	asrs	r4, r4, #2
 8009028:	2600      	movs	r6, #0
 800902a:	42a6      	cmp	r6, r4
 800902c:	d105      	bne.n	800903a <__libc_init_array+0x2e>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	f855 3b04 	ldr.w	r3, [r5], #4
 8009034:	4798      	blx	r3
 8009036:	3601      	adds	r6, #1
 8009038:	e7ee      	b.n	8009018 <__libc_init_array+0xc>
 800903a:	f855 3b04 	ldr.w	r3, [r5], #4
 800903e:	4798      	blx	r3
 8009040:	3601      	adds	r6, #1
 8009042:	e7f2      	b.n	800902a <__libc_init_array+0x1e>
 8009044:	0800906c 	.word	0x0800906c
 8009048:	0800906c 	.word	0x0800906c
 800904c:	0800906c 	.word	0x0800906c
 8009050:	08009070 	.word	0x08009070

08009054 <_init>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr

08009060 <_fini>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr
