
STM32_Drivers_Layer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d8c  08000d8c  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d8c  08000d8c  00020400  2**0
                  CONTENTS
  4 .ARM          00000000  08000d8c  08000d8c  00020400  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d8c  08000d8c  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d8c  08000d8c  00010d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d90  08000d90  00010d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08000d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000400  08001194  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08001194  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000127b  00000000  00000000  00020473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000053c  00000000  00000000  000216ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00021c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d9  00000000  00000000  00021d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000046b  00000000  00000000  00021e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d1d  00000000  00000000  000222a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009adb  00000000  00000000  00023fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000003ec  00000000  00000000  0002da9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0002de88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000400 	.word	0x20000400
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d74 	.word	0x08000d74

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000404 	.word	0x20000404
 8000200:	08000d74 	.word	0x08000d74

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d141      	bne.n	80002aa <USART_PeriClockControl+0x96>
		if(pUSARTx==USART1)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a43      	ldr	r2, [pc, #268]	; (8000338 <USART_PeriClockControl+0x124>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 800022e:	4b43      	ldr	r3, [pc, #268]	; (800033c <USART_PeriClockControl+0x128>)
 8000230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000232:	4a42      	ldr	r2, [pc, #264]	; (800033c <USART_PeriClockControl+0x128>)
 8000234:	f043 0310 	orr.w	r3, r3, #16
 8000238:	6453      	str	r3, [r2, #68]	; 0x44
			USART6_PCCK_DI();
		} else {
			;
		}
	}
}
 800023a:	e077      	b.n	800032c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART2)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a40      	ldr	r2, [pc, #256]	; (8000340 <USART_PeriClockControl+0x12c>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000244:	4b3d      	ldr	r3, [pc, #244]	; (800033c <USART_PeriClockControl+0x128>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000248:	4a3c      	ldr	r2, [pc, #240]	; (800033c <USART_PeriClockControl+0x128>)
 800024a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000250:	e06c      	b.n	800032c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART3)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a3b      	ldr	r2, [pc, #236]	; (8000344 <USART_PeriClockControl+0x130>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 800025a:	4b38      	ldr	r3, [pc, #224]	; (800033c <USART_PeriClockControl+0x128>)
 800025c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800025e:	4a37      	ldr	r2, [pc, #220]	; (800033c <USART_PeriClockControl+0x128>)
 8000260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000264:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000266:	e061      	b.n	800032c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==UART4)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a37      	ldr	r2, [pc, #220]	; (8000348 <USART_PeriClockControl+0x134>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <USART_PeriClockControl+0x6a>
			UART4_PCCK_EN();
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <USART_PeriClockControl+0x128>)
 8000272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000274:	4a31      	ldr	r2, [pc, #196]	; (800033c <USART_PeriClockControl+0x128>)
 8000276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800027a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800027c:	e056      	b.n	800032c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==UART5)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a32      	ldr	r2, [pc, #200]	; (800034c <USART_PeriClockControl+0x138>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <USART_PeriClockControl+0x80>
			UART5_PCCK_EN();
 8000286:	4b2d      	ldr	r3, [pc, #180]	; (800033c <USART_PeriClockControl+0x128>)
 8000288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028a:	4a2c      	ldr	r2, [pc, #176]	; (800033c <USART_PeriClockControl+0x128>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000290:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000292:	e04b      	b.n	800032c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART6){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <USART_PeriClockControl+0x13c>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d147      	bne.n	800032c <USART_PeriClockControl+0x118>
			 USART6_PCCK_EN();
 800029c:	4b27      	ldr	r3, [pc, #156]	; (800033c <USART_PeriClockControl+0x128>)
 800029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a0:	4a26      	ldr	r2, [pc, #152]	; (800033c <USART_PeriClockControl+0x128>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002a8:	e040      	b.n	800032c <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1) {
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a22      	ldr	r2, [pc, #136]	; (8000338 <USART_PeriClockControl+0x124>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <USART_PeriClockControl+0xac>
			USART1_PCCK_DI();
 80002b2:	4b22      	ldr	r3, [pc, #136]	; (800033c <USART_PeriClockControl+0x128>)
 80002b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b6:	4a21      	ldr	r2, [pc, #132]	; (800033c <USART_PeriClockControl+0x128>)
 80002b8:	f023 0310 	bic.w	r3, r3, #16
 80002bc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80002be:	e035      	b.n	800032c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART2) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a1f      	ldr	r2, [pc, #124]	; (8000340 <USART_PeriClockControl+0x12c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <USART_PeriClockControl+0xc2>
			USART2_PCCK_DI();
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <USART_PeriClockControl+0x128>)
 80002ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <USART_PeriClockControl+0x128>)
 80002ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80002d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002d4:	e02a      	b.n	800032c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART3) {
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <USART_PeriClockControl+0x130>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <USART_PeriClockControl+0xd8>
			USART3_PCCK_DI();
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <USART_PeriClockControl+0x128>)
 80002e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e2:	4a16      	ldr	r2, [pc, #88]	; (800033c <USART_PeriClockControl+0x128>)
 80002e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002ea:	e01f      	b.n	800032c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART4) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a16      	ldr	r2, [pc, #88]	; (8000348 <USART_PeriClockControl+0x134>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <USART_PeriClockControl+0xee>
			UART4_PCCK_DI();
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <USART_PeriClockControl+0x128>)
 80002f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f8:	4a10      	ldr	r2, [pc, #64]	; (800033c <USART_PeriClockControl+0x128>)
 80002fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000300:	e014      	b.n	800032c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART5) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <USART_PeriClockControl+0x138>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <USART_PeriClockControl+0x104>
			UART5_PCCK_DI();
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <USART_PeriClockControl+0x128>)
 800030c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030e:	4a0b      	ldr	r2, [pc, #44]	; (800033c <USART_PeriClockControl+0x128>)
 8000310:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000314:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000316:	e009      	b.n	800032c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART6) {
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <USART_PeriClockControl+0x13c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d105      	bne.n	800032c <USART_PeriClockControl+0x118>
			USART6_PCCK_DI();
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <USART_PeriClockControl+0x128>)
 8000322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000324:	4a05      	ldr	r2, [pc, #20]	; (800033c <USART_PeriClockControl+0x128>)
 8000326:	f023 0320 	bic.w	r3, r3, #32
 800032a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40011000 	.word	0x40011000
 800033c:	40023800 	.word	0x40023800
 8000340:	40004400 	.word	0x40004400
 8000344:	40004800 	.word	0x40004800
 8000348:	40004c00 	.word	0x40004c00
 800034c:	40005000 	.word	0x40005000
 8000350:	40011400 	.word	0x40011400

08000354 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2101      	movs	r1, #1
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff56 	bl	8000214 <USART_PeriClockControl>
	switch(pUSARTHandle->USART_Config.USART_Mode)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	791b      	ldrb	r3, [r3, #4]
 800036c:	2b02      	cmp	r3, #2
 800036e:	d013      	beq.n	8000398 <USART_Init+0x44>
 8000370:	2b02      	cmp	r3, #2
 8000372:	dc1a      	bgt.n	80003aa <USART_Init+0x56>
 8000374:	2b00      	cmp	r3, #0
 8000376:	d00a      	beq.n	800038e <USART_Init+0x3a>
 8000378:	2b01      	cmp	r3, #1
 800037a:	d116      	bne.n	80003aa <USART_Init+0x56>
	{
	case USART_MODE_ONLY_RX:
	{
		pUSARTHandle->pUSARTx->CR1|= (1 << USART_CR1_RE);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68da      	ldr	r2, [r3, #12]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f042 0204 	orr.w	r2, r2, #4
 800038a:	60da      	str	r2, [r3, #12]
		break;
 800038c:	e00e      	b.n	80003ac <USART_Init+0x58>
	}
	case USART_MODE_ONLY_TX:
	{
		pUSARTHandle->pUSARTx->CR1= (1 << USART_CR1_TE);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2208      	movs	r2, #8
 8000394:	60da      	str	r2, [r3, #12]
		break;
 8000396:	e009      	b.n	80003ac <USART_Init+0x58>
	}
	case USART_MODE_TXRX:
	{
		pUSARTHandle->pUSARTx->CR1|= ((1 << USART_CR1_RE)|(1 << USART_CR1_TE));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	68da      	ldr	r2, [r3, #12]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f042 020c 	orr.w	r2, r2, #12
 80003a6:	60da      	str	r2, [r3, #12]
		break;
 80003a8:	e000      	b.n	80003ac <USART_Init+0x58>
	}
	default:
	{
		break;
 80003aa:	bf00      	nop
	}
	}
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	7b9b      	ldrb	r3, [r3, #14]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d10e      	bne.n	80003d2 <USART_Init+0x7e>
	{
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PCE);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	68da      	ldr	r2, [r3, #12]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003c2:	60da      	str	r2, [r3, #12]
		pUSARTHandle->pUSARTx->CR1 |= ( 0 << USART_CR1_PS);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	68d2      	ldr	r2, [r2, #12]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	e013      	b.n	80003fa <USART_Init+0xa6>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl ==USART_PARITY_EN_ODD)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7b9b      	ldrb	r3, [r3, #14]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	d10f      	bne.n	80003fa <USART_Init+0xa6>
	{
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PCE);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	68da      	ldr	r2, [r3, #12]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003e8:	60da      	str	r2, [r3, #12]
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_PS);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003f8:	60da      	str	r2, [r3, #12]
	}else
	{
		;
	}
	 //Implement the code to configure the Word length configuration item
	pUSARTHandle->pUSARTx->CR1 |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68da      	ldr	r2, [r3, #12]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	7b5b      	ldrb	r3, [r3, #13]
 8000404:	031b      	lsls	r3, r3, #12
 8000406:	4619      	mov	r1, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	430a      	orrs	r2, r1
 800040e:	60da      	str	r2, [r3, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	switch(pUSARTHandle->USART_Config.USART_NoOfStopBits)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	7b1b      	ldrb	r3, [r3, #12]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d82d      	bhi.n	8000474 <USART_Init+0x120>
 8000418:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <USART_Init+0xcc>)
 800041a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041e:	bf00      	nop
 8000420:	08000431 	.word	0x08000431
 8000424:	0800043f 	.word	0x0800043f
 8000428:	08000451 	.word	0x08000451
 800042c:	08000463 	.word	0x08000463
	{
	case USART_STOPBITS_1:
	{
		pUSARTHandle->pUSARTx->CR2 |=0<< USART_CR2_STOP;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	6912      	ldr	r2, [r2, #16]
 800043a:	611a      	str	r2, [r3, #16]
		break;
 800043c:	e01b      	b.n	8000476 <USART_Init+0x122>
	}
	case USART_STOPBITS_0_5:
	{
		pUSARTHandle->pUSARTx->CR2 |=1<< USART_CR2_STOP;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	691a      	ldr	r2, [r3, #16]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800044c:	611a      	str	r2, [r3, #16]
		break;
 800044e:	e012      	b.n	8000476 <USART_Init+0x122>
	}
	case USART_STOPBITS_2:
	{
		pUSARTHandle->pUSARTx->CR2 |=2<< USART_CR2_STOP;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	691a      	ldr	r2, [r3, #16]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800045e:	611a      	str	r2, [r3, #16]
		break;
 8000460:	e009      	b.n	8000476 <USART_Init+0x122>
	}
	case USART_STOPBITS_1_5:
	{
		pUSARTHandle->pUSARTx->CR2 |=3<< USART_CR2_STOP;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	691a      	ldr	r2, [r3, #16]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000470:	611a      	str	r2, [r3, #16]
		break;
 8000472:	e000      	b.n	8000476 <USART_Init+0x122>
	}
	default:
	{
		break;
 8000474:	bf00      	nop
	}
	}


	//Configuration of USART hardware flow control
	switch(pUSARTHandle->USART_Config.USART_HWFlowControl)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	7bdb      	ldrb	r3, [r3, #15]
 800047a:	2b03      	cmp	r3, #3
 800047c:	d018      	beq.n	80004b0 <USART_Init+0x15c>
 800047e:	2b03      	cmp	r3, #3
 8000480:	dc1f      	bgt.n	80004c2 <USART_Init+0x16e>
 8000482:	2b01      	cmp	r3, #1
 8000484:	d002      	beq.n	800048c <USART_Init+0x138>
 8000486:	2b02      	cmp	r3, #2
 8000488:	d009      	beq.n	800049e <USART_Init+0x14a>
			pUSARTHandle->pUSARTx->CR3 |=( 1 << USART_CR3_CTSE)|( 1 << USART_CR3_RTSE);
			break;
		}
		default:
		{
			break;
 800048a:	e01a      	b.n	80004c2 <USART_Init+0x16e>
			pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_CTSE);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800049a:	615a      	str	r2, [r3, #20]
			break;
 800049c:	e012      	b.n	80004c4 <USART_Init+0x170>
			pUSARTHandle->pUSARTx->CR3 |=( 1 << USART_CR3_RTSE);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004ac:	615a      	str	r2, [r3, #20]
			break;
 80004ae:	e009      	b.n	80004c4 <USART_Init+0x170>
			pUSARTHandle->pUSARTx->CR3 |=( 1 << USART_CR3_CTSE)|( 1 << USART_CR3_RTSE);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80004be:	615a      	str	r2, [r3, #20]
			break;
 80004c0:	e000      	b.n	80004c4 <USART_Init+0x170>
			break;
 80004c2:	bf00      	nop
	/******************************** Configuration of BRR(Baudrate register)******************************************/

		//Implement the code to configure the baud rate
		//We will cover this in the lecture. No action required here
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d106      	bne.n	80004ec <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 80004ea:	e005      	b.n	80004f8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60da      	str	r2, [r3, #12]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	4013      	ands	r3, r2
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 800051c:	2301      	movs	r3, #1
 800051e:	e000      	b.n	8000522 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <USART_SendData>:
 *
 * @Note              -

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{uint16_t *pdata;
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]

//Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e031      	b.n	80005a4 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000540:	bf00      	nop
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffdb 	bl	8000504 <USART_GetFlagStatus>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f6      	beq.n	8000542 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	7b5b      	ldrb	r3, [r3, #13]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d118      	bne.n	800058e <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800056e:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	7b9b      	ldrb	r3, [r3, #14]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d106      	bne.n	8000586 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	3301      	adds	r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	3301      	adds	r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	e00b      	b.n	800059e <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	3301      	adds	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	e007      	b.n	800059e <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3301      	adds	r3, #1
 800059c:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3c9      	bcc.n	8000540 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80005ac:	bf00      	nop
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffa5 	bl	8000504 <USART_GetFlagStatus>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f6      	beq.n	80005ae <USART_SendData+0x80>

}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <GPIO_Init>:
 *
 * @Note              -  none
*/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f9d6 	bl	8000990 <GPIO_PeriClockControl>

	//Pin Configuration
	switch (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	f200 80d0 	bhi.w	800078e <GPIO_Init+0x1c2>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <GPIO_Init+0x28>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000689 	.word	0x08000689
 80005f8:	080006c7 	.word	0x080006c7
 80005fc:	0800064d 	.word	0x0800064d
 8000600:	08000611 	.word	0x08000611
 8000604:	08000703 	.word	0x08000703
 8000608:	08000733 	.word	0x08000733
 800060c:	08000763 	.word	0x08000763
	case GPIO_MODE_ANALOG: {
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	2103      	movs	r1, #3
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	400a      	ands	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	2103      	movs	r1, #3
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	4619      	mov	r1, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
		break;
 800064a:	e0a1      	b.n	8000790 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_ALTFN: {
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2103      	movs	r1, #3
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x2<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	2102      	movs	r1, #2
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	4619      	mov	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	430a      	orrs	r2, r1
 8000684:	601a      	str	r2, [r3, #0]
		break;
 8000686:	e083      	b.n	8000790 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IN:
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2103      	movs	r1, #3
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	400a      	ands	r2, r1
 80006a4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER &= ~(0x1<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	400a      	ands	r2, r1
 80006c2:	601a      	str	r2, [r3, #0]
		break;
 80006c4:	e064      	b.n	8000790 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_OUT:
	{
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); // Clearing the position
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	2103      	movs	r1, #3
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	400a      	ands	r2, r1
 80006e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (0x1<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	430a      	orrs	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
		break;
 8000700:	e046      	b.n	8000790 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IT_FT:
	{
		EXTI->FTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000702:	4b97      	ldr	r3, [pc, #604]	; (8000960 <GPIO_Init+0x394>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	7912      	ldrb	r2, [r2, #4]
 800070a:	4611      	mov	r1, r2
 800070c:	2201      	movs	r2, #1
 800070e:	408a      	lsls	r2, r1
 8000710:	4611      	mov	r1, r2
 8000712:	4a93      	ldr	r2, [pc, #588]	; (8000960 <GPIO_Init+0x394>)
 8000714:	430b      	orrs	r3, r1
 8000716:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR&=~(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));//Clearing Rising Intrupt line
 8000718:	4b91      	ldr	r3, [pc, #580]	; (8000960 <GPIO_Init+0x394>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	7912      	ldrb	r2, [r2, #4]
 8000720:	4611      	mov	r1, r2
 8000722:	2201      	movs	r2, #1
 8000724:	408a      	lsls	r2, r1
 8000726:	43d2      	mvns	r2, r2
 8000728:	4611      	mov	r1, r2
 800072a:	4a8d      	ldr	r2, [pc, #564]	; (8000960 <GPIO_Init+0x394>)
 800072c:	400b      	ands	r3, r1
 800072e:	6093      	str	r3, [r2, #8]
		break;
 8000730:	e02e      	b.n	8000790 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IT_RT:
	{
		EXTI->RTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000732:	4b8b      	ldr	r3, [pc, #556]	; (8000960 <GPIO_Init+0x394>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	7912      	ldrb	r2, [r2, #4]
 800073a:	4611      	mov	r1, r2
 800073c:	2201      	movs	r2, #1
 800073e:	408a      	lsls	r2, r1
 8000740:	4611      	mov	r1, r2
 8000742:	4a87      	ldr	r2, [pc, #540]	; (8000960 <GPIO_Init+0x394>)
 8000744:	430b      	orrs	r3, r1
 8000746:	6093      	str	r3, [r2, #8]
		EXTI->FTSR&=~(0x01<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));// Clearing the falling intrupt line
 8000748:	4b85      	ldr	r3, [pc, #532]	; (8000960 <GPIO_Init+0x394>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7912      	ldrb	r2, [r2, #4]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	43d2      	mvns	r2, r2
 8000758:	4611      	mov	r1, r2
 800075a:	4a81      	ldr	r2, [pc, #516]	; (8000960 <GPIO_Init+0x394>)
 800075c:	400b      	ands	r3, r1
 800075e:	60d3      	str	r3, [r2, #12]
		break;
 8000760:	e016      	b.n	8000790 <GPIO_Init+0x1c4>
	}
	case GPIO_MODE_IT_RFT:
	{
		EXTI->RTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000762:	4b7f      	ldr	r3, [pc, #508]	; (8000960 <GPIO_Init+0x394>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7912      	ldrb	r2, [r2, #4]
 800076a:	4611      	mov	r1, r2
 800076c:	2201      	movs	r2, #1
 800076e:	408a      	lsls	r2, r1
 8000770:	4611      	mov	r1, r2
 8000772:	4a7b      	ldr	r2, [pc, #492]	; (8000960 <GPIO_Init+0x394>)
 8000774:	430b      	orrs	r3, r1
 8000776:	6093      	str	r3, [r2, #8]
		EXTI->FTSR|=(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));// Clearing the falling intrupt line
 8000778:	4b79      	ldr	r3, [pc, #484]	; (8000960 <GPIO_Init+0x394>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7912      	ldrb	r2, [r2, #4]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	4611      	mov	r1, r2
 8000788:	4a75      	ldr	r2, [pc, #468]	; (8000960 <GPIO_Init+0x394>)
 800078a:	430b      	orrs	r3, r1
 800078c:	60d3      	str	r3, [r2, #12]
	}
	default: {
		break;
 800078e:	bf00      	nop
	}

	}
	//2. configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	799b      	ldrb	r3, [r3, #6]
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	60fb      	str	r3, [r7, #12]
	(pGPIOHandle->pGPIOx->OSPEEDR) &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2103      	movs	r1, #3
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	400a      	ands	r2, r1
 80007be:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6899      	ldr	r1, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	609a      	str	r2, [r3, #8]

	//Pull Push Configuration
	temp=0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	79db      	ldrb	r3, [r3, #7]
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR|= ~(0x3<< (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2103      	movs	r1, #3
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	430a      	orrs	r2, r1
 8000802:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR|=temp;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68d9      	ldr	r1, [r3, #12]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	430a      	orrs	r2, r1
 8000812:	60da      	str	r2, [r3, #12]
//	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
//	pGPIOHandle->pGPIOx->OTYPER|= ~(0x1<< ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
//	pGPIOHandle->pGPIOx->OTYPER|=temp;
//
	//Alternative Functionality Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode==GPIO_MODE_ALTFN)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a5b      	ldrb	r3, [r3, #9]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d138      	bne.n	800088e <GPIO_Init+0x2c2>
	{
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]&=~(0xF<<(4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8)));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	7912      	ldrb	r2, [r2, #4]
 8000824:	08d2      	lsrs	r2, r2, #3
 8000826:	b2d0      	uxtb	r0, r2
 8000828:	4602      	mov	r2, r0
 800082a:	3208      	adds	r2, #8
 800082c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	210f      	movs	r1, #15
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	4619      	mov	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4011      	ands	r1, r2
 800084a:	f100 0208 	add.w	r2, r0, #8
 800084e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8]|=(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)<<(4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	7912      	ldrb	r2, [r2, #4]
 800085a:	08d2      	lsrs	r2, r2, #3
 800085c:	b2d1      	uxtb	r1, r2
 800085e:	460a      	mov	r2, r1
 8000860:	3208      	adds	r2, #8
 8000862:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	4618      	mov	r0, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	f003 0307 	and.w	r3, r3, #7
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	fa00 f303 	lsl.w	r3, r0, r3
 800087a:	461c      	mov	r4, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4608      	mov	r0, r1
 8000882:	ea42 0104 	orr.w	r1, r2, r4
 8000886:	f100 0208 	add.w	r2, r0, #8
 800088a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	//2. configure the GPIO port selection in SYSCFG_EXTICR
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	72fb      	strb	r3, [r7, #11]
	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	f003 0303 	and.w	r3, r3, #3
 800089e:	72bb      	strb	r3, [r7, #10]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <GPIO_Init+0x398>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d039      	beq.n	800091e <GPIO_Init+0x352>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <GPIO_Init+0x39c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d032      	beq.n	800091a <GPIO_Init+0x34e>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a2c      	ldr	r2, [pc, #176]	; (800096c <GPIO_Init+0x3a0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d02b      	beq.n	8000916 <GPIO_Init+0x34a>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <GPIO_Init+0x3a4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d024      	beq.n	8000912 <GPIO_Init+0x346>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a29      	ldr	r2, [pc, #164]	; (8000974 <GPIO_Init+0x3a8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d01d      	beq.n	800090e <GPIO_Init+0x342>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <GPIO_Init+0x3ac>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d016      	beq.n	800090a <GPIO_Init+0x33e>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a26      	ldr	r2, [pc, #152]	; (800097c <GPIO_Init+0x3b0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d00f      	beq.n	8000906 <GPIO_Init+0x33a>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a25      	ldr	r2, [pc, #148]	; (8000980 <GPIO_Init+0x3b4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d008      	beq.n	8000902 <GPIO_Init+0x336>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a23      	ldr	r2, [pc, #140]	; (8000984 <GPIO_Init+0x3b8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <GPIO_Init+0x332>
 80008fa:	2308      	movs	r3, #8
 80008fc:	e010      	b.n	8000920 <GPIO_Init+0x354>
 80008fe:	2300      	movs	r3, #0
 8000900:	e00e      	b.n	8000920 <GPIO_Init+0x354>
 8000902:	2307      	movs	r3, #7
 8000904:	e00c      	b.n	8000920 <GPIO_Init+0x354>
 8000906:	2306      	movs	r3, #6
 8000908:	e00a      	b.n	8000920 <GPIO_Init+0x354>
 800090a:	2305      	movs	r3, #5
 800090c:	e008      	b.n	8000920 <GPIO_Init+0x354>
 800090e:	2304      	movs	r3, #4
 8000910:	e006      	b.n	8000920 <GPIO_Init+0x354>
 8000912:	2303      	movs	r3, #3
 8000914:	e004      	b.n	8000920 <GPIO_Init+0x354>
 8000916:	2302      	movs	r3, #2
 8000918:	e002      	b.n	8000920 <GPIO_Init+0x354>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <GPIO_Init+0x354>
 800091e:	2300      	movs	r3, #0
 8000920:	727b      	strb	r3, [r7, #9]
	SYSCFG_PCLK_EN();
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <GPIO_Init+0x3bc>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <GPIO_Init+0x3bc>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800092e:	7a7a      	ldrb	r2, [r7, #9]
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	fa02 f103 	lsl.w	r1, r2, r3
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <GPIO_Init+0x3c0>)
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	3302      	adds	r3, #2
 800093e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	//3 . enable the exti interrupt delivery using IMR
	EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <GPIO_Init+0x394>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	7912      	ldrb	r2, [r2, #4]
 800094a:	4611      	mov	r1, r2
 800094c:	2201      	movs	r2, #1
 800094e:	408a      	lsls	r2, r1
 8000950:	4611      	mov	r1, r2
 8000952:	4a03      	ldr	r2, [pc, #12]	; (8000960 <GPIO_Init+0x394>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40013c00 	.word	0x40013c00
 8000964:	40020000 	.word	0x40020000
 8000968:	40020400 	.word	0x40020400
 800096c:	40020800 	.word	0x40020800
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40021000 	.word	0x40021000
 8000978:	40021400 	.word	0x40021400
 800097c:	40021800 	.word	0x40021800
 8000980:	40021c00 	.word	0x40021c00
 8000984:	40022000 	.word	0x40022000
 8000988:	40023800 	.word	0x40023800
 800098c:	40013800 	.word	0x40013800

08000990 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d162      	bne.n	8000a68 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a64      	ldr	r2, [pc, #400]	; (8000b38 <GPIO_PeriClockControl+0x1a8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d106      	bne.n	80009b8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80009aa:	4b64      	ldr	r3, [pc, #400]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a63      	ldr	r2, [pc, #396]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 80009b6:	e0b9      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a61      	ldr	r2, [pc, #388]	; (8000b40 <GPIO_PeriClockControl+0x1b0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d106      	bne.n	80009ce <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009c0:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a5d      	ldr	r2, [pc, #372]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009cc:	e0ae      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a5c      	ldr	r2, [pc, #368]	; (8000b44 <GPIO_PeriClockControl+0x1b4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d106      	bne.n	80009e4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009d6:	4b59      	ldr	r3, [pc, #356]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a58      	ldr	r2, [pc, #352]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e2:	e0a3      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a58      	ldr	r2, [pc, #352]	; (8000b48 <GPIO_PeriClockControl+0x1b8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d106      	bne.n	80009fa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f8:	e098      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a53      	ldr	r2, [pc, #332]	; (8000b4c <GPIO_PeriClockControl+0x1bc>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d106      	bne.n	8000a10 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a02:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0e:	e08d      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a4f      	ldr	r2, [pc, #316]	; (8000b50 <GPIO_PeriClockControl+0x1c0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d106      	bne.n	8000a26 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a18:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a47      	ldr	r2, [pc, #284]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a24:	e082      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4a      	ldr	r2, [pc, #296]	; (8000b54 <GPIO_PeriClockControl+0x1c4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d106      	bne.n	8000a3c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a42      	ldr	r2, [pc, #264]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a3a:	e077      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a46      	ldr	r2, [pc, #280]	; (8000b58 <GPIO_PeriClockControl+0x1c8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d106      	bne.n	8000a52 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a44:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	4a3c      	ldr	r2, [pc, #240]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a50:	e06c      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a41      	ldr	r2, [pc, #260]	; (8000b5c <GPIO_PeriClockControl+0x1cc>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d168      	bne.n	8000b2c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a66:	e061      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a33      	ldr	r2, [pc, #204]	; (8000b38 <GPIO_PeriClockControl+0x1a8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d106      	bne.n	8000a7e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	4a31      	ldr	r2, [pc, #196]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a7c:	e056      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <GPIO_PeriClockControl+0x1b0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d106      	bne.n	8000a94 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a8c:	f023 0302 	bic.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a92:	e04b      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a2b      	ldr	r2, [pc, #172]	; (8000b44 <GPIO_PeriClockControl+0x1b4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d106      	bne.n	8000aaa <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000aa2:	f023 0304 	bic.w	r3, r3, #4
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa8:	e040      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <GPIO_PeriClockControl+0x1b8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d106      	bne.n	8000ac0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000ab8:	f023 0308 	bic.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000abe:	e035      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <GPIO_PeriClockControl+0x1bc>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d106      	bne.n	8000ad6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000ace:	f023 0310 	bic.w	r3, r3, #16
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ad4:	e02a      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <GPIO_PeriClockControl+0x1c0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d106      	bne.n	8000aec <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000ae4:	f023 0320 	bic.w	r3, r3, #32
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aea:	e01f      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <GPIO_PeriClockControl+0x1c4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d106      	bne.n	8000b02 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b00:	e014      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <GPIO_PeriClockControl+0x1c8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d106      	bne.n	8000b18 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b16:	e009      	b.n	8000b2c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <GPIO_PeriClockControl+0x1cc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d105      	bne.n	8000b2c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <GPIO_PeriClockControl+0x1ac>)
 8000b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	40022000 	.word	0x40022000

08000b60 <delay>:
 */
#include <stdint.h>
#include"stm32f446xx.h"
#include"string.h"
void delay(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	e002      	b.n	8000b72 <delay+0x12>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <delay+0x28>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d9f8      	bls.n	8000b6c <delay+0xc>
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	0003d08f 	.word	0x0003d08f

08000b8c <USART2_Init>:
USART_Handle_t usart2_handle;
//baud Rate
static void uart_set_baudrate(USART_RegDef_t *pUSARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void USART2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <USART2_Init+0x3c>)
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <USART2_Init+0x40>)
 8000b94:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud =USART_STD_BAUD_115200;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <USART2_Init+0x3c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <USART2_Init+0x3c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <USART2_Init+0x3c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <USART2_Init+0x3c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <USART2_Init+0x3c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <USART2_Init+0x3c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <USART2_Init+0x3c>)
 8000bbe:	f7ff fbc9 	bl	8000354 <USART_Init>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000041c 	.word	0x2000041c
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <USART2_GPIOInit>:
void 	USART2_GPIOInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <USART2_GPIOInit+0x3c>)
 8000bd8:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000bde:	2300      	movs	r3, #0
 8000be0:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000be2:	2301      	movs	r3, #1
 8000be4:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000be6:	2302      	movs	r3, #2
 8000be8:	72bb      	strb	r3, [r7, #10]
	//usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fceb 	bl	80005cc <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fce5 	bl	80005cc <GPIO_Init>


}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020000 	.word	0x40020000

08000c10 <main>:

int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	USART2_GPIOInit();
 8000c14:	f7ff ffdc 	bl	8000bd0 <USART2_GPIOInit>

//	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <main+0x68>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <main+0x68>)
 8000c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c22:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <main+0x68>)
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <main+0x68>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <main+0x68>)
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <main+0x68>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <main+0x68>)
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <main+0x68>)
 8000c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c46:	6213      	str	r3, [r2, #32]

    USART2_Init();
 8000c48:	f7ff ffa0 	bl	8000b8c <USART2_Init>
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	490a      	ldr	r1, [pc, #40]	; (8000c7c <main+0x6c>)
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <main+0x70>)
 8000c54:	f000 f81a 	bl	8000c8c <uart_set_baudrate>
    USART_PeripheralControl(USART2,ENABLE);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <main+0x70>)
 8000c5c:	f7ff fc36 	bl	80004cc <USART_PeripheralControl>

    while(1)
    {
		delay();
 8000c60:	f7ff ff7e 	bl	8000b60 <delay>

    	USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <main+0x74>)
 8000c66:	f7ff facd 	bl	8000204 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4905      	ldr	r1, [pc, #20]	; (8000c84 <main+0x74>)
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <main+0x78>)
 8000c72:	f7ff fc5c 	bl	800052e <USART_SendData>
		delay();
 8000c76:	e7f3      	b.n	8000c60 <main+0x50>
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	00f42400 	.word	0x00f42400
 8000c80:	40004400 	.word	0x40004400
 8000c84:	20000000 	.word	0x20000000
 8000c88:	2000041c 	.word	0x2000041c

08000c8c <uart_set_baudrate>:
    }
}
 void uart_set_baudrate(USART_RegDef_t *pUSARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	pUSARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	68b8      	ldr	r0, [r7, #8]
 8000c9c:	f000 f808 	bl	8000cb0 <compute_uart_bd>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	609a      	str	r2, [r3, #8]
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <compute_uart_bd>:

 uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	085a      	lsrs	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	441a      	add	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc8:	b29b      	uxth	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cdc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d06:	f000 f811 	bl	8000d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0a:	f7ff ff81 	bl	8000c10 <main>

08000d0e <LoopForever>:

LoopForever:
  b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8000d1c:	08000d94 	.word	0x08000d94
  ldr r2, =_sbss
 8000d20:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8000d24:	20000440 	.word	0x20000440

08000d28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <__libc_init_array>:
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	4d0d      	ldr	r5, [pc, #52]	; (8000d64 <__libc_init_array+0x38>)
 8000d30:	4c0d      	ldr	r4, [pc, #52]	; (8000d68 <__libc_init_array+0x3c>)
 8000d32:	1b64      	subs	r4, r4, r5
 8000d34:	10a4      	asrs	r4, r4, #2
 8000d36:	2600      	movs	r6, #0
 8000d38:	42a6      	cmp	r6, r4
 8000d3a:	d109      	bne.n	8000d50 <__libc_init_array+0x24>
 8000d3c:	4d0b      	ldr	r5, [pc, #44]	; (8000d6c <__libc_init_array+0x40>)
 8000d3e:	4c0c      	ldr	r4, [pc, #48]	; (8000d70 <__libc_init_array+0x44>)
 8000d40:	f000 f818 	bl	8000d74 <_init>
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	10a4      	asrs	r4, r4, #2
 8000d48:	2600      	movs	r6, #0
 8000d4a:	42a6      	cmp	r6, r4
 8000d4c:	d105      	bne.n	8000d5a <__libc_init_array+0x2e>
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d54:	4798      	blx	r3
 8000d56:	3601      	adds	r6, #1
 8000d58:	e7ee      	b.n	8000d38 <__libc_init_array+0xc>
 8000d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5e:	4798      	blx	r3
 8000d60:	3601      	adds	r6, #1
 8000d62:	e7f2      	b.n	8000d4a <__libc_init_array+0x1e>
 8000d64:	08000d8c 	.word	0x08000d8c
 8000d68:	08000d8c 	.word	0x08000d8c
 8000d6c:	08000d8c 	.word	0x08000d8c
 8000d70:	08000d90 	.word	0x08000d90

08000d74 <_init>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	bf00      	nop
 8000d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7a:	bc08      	pop	{r3}
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	4770      	bx	lr

08000d80 <_fini>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	bf00      	nop
 8000d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d86:	bc08      	pop	{r3}
 8000d88:	469e      	mov	lr, r3
 8000d8a:	4770      	bx	lr
